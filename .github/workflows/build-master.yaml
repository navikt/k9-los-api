name: Build Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENCE'
      - 'CODEOWNERS'

env:
  BASE_IMAGE: docker.pkg.github.com/${{ github.repository }}/k9-los-api
  GITHUB_USERNAME: x-access-token
  GITHUB_TOKEN: ${{ secrets.LOS_TOKEN }}

jobs:
  Build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-java@v1.4.3
        with:
          java-version: 16
      - uses: actions/cache@v2.1.4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Bygge JAR
        run: |
          ./gradlew test shadowjar
          echo "TAG=${TAG}$(date "+%Y.%m.%d")-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "IMAGE=${IMAGE}$BASE_IMAGE:$(date "+%Y.%m.%d")-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Bygg & last opp Docker image
        run: |
          docker build --tag ${IMAGE} --tag ${BASE_IMAGE}:latest .
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker push $BASE_IMAGE:latest
          docker push $IMAGE

      - name: Lukk gamle issues
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });

      -  name: Opprett deployment issue
         id: createdeployissue
         if: success()
         uses: actions/github-script@v3
         with:
           github-token: ${{secrets.GITHUB_TOKEN}}
           script: |
               github.issues.create( {
                 owner: context.issue.owner,
                 repo: context.issue.repo,
                 labels: ['deployment'],
                 body: 'Kommenter enten "/promote dev-fss" eller "/promote prod-fss"',
                 title: 'Deploy av ${{ env.TAG }}'})
               .then(response => {
                       core.setOutput('number', response.data.number);
                });

      - name: Deploy til preprod
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.DEPLOY_KEY }}
          CLUSTER: dev-fss
          RESOURCE: nais/dev-fss.yml

