name: Build Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENCE'
      - 'CODEOWNERS'
      - 'alerts/*'
      - '.github/workflows/deploy-alerts.yml'

env:
  BASE_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  Build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: 'adopt'
          cache: gradle
      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: KjÃ¸r tester & bygg JAR
        run: |
          ./gradlew test shadowjar
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.READER_TOKEN }}

      - uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.REPOSITORY_OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sett tag for docker image
        run: echo "TAG=$(date "+%Y.%m.%d")-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Bygg & last opp Docker image
        run: |
          docker build --pull --tag ${BASE_IMAGE}:${TAG} --tag ${BASE_IMAGE}:latest .
          docker push ${BASE_IMAGE} --all-tags

      - name: Sett image for nais deploy
        run: echo "IMAGE=${BASE_IMAGE}:${TAG}" >> $GITHUB_ENV

      - name: Lukk gamle issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });

      -  name: Opprett deployment issue
         id: createdeployissue
         if: success()
         uses: actions/github-script@v6
         with:
           github-token: ${{secrets.GITHUB_TOKEN}}
           script: |
               github.rest.issues.create( {
                 owner: context.issue.owner,
                 repo: context.issue.repo,
                 labels: ['deployment'],
                 body: 'Kommenter enten "/promote dev-fss" eller "/promote prod-fss"',
                 title: 'Deploy av ${{ env.TAG }}'})
               .then(response => {
                       core.setOutput('number', response.data.number);
                });

      - name: Deploy til preprod
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.DEPLOY_KEY }}
          CLUSTER: dev-fss
          RESOURCE: nais/dev-fss.yml

